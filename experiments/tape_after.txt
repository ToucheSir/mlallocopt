Tape{GradCtx}
  inp %1::typeof(loss)
  inp %2::Chain{Tuple{Chain{Tuple{Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}}}, Chain{Tuple{AdaptiveMeanPool{4, 2}, typeof(flatten), Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}}}
  inp %3::Array{Float32, 4}
  inp %4::Matrix{Float32}
  const %5 = mse::typeof(Flux.Losses.mse)
  %6 = getproperty(%2, :layers)::Tuple{Chain{Tuple{Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}}}, Chain{Tuple{AdaptiveMeanPool{4, 2}, typeof(flatten), Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}} 
  %7 = getindex(%6, 1)::Chain{Tuple{Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}}} 
  %8 = getproperty(%7, :layers)::Tuple{Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}} 
  %9 = getindex(%8, 1)::Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}} 
  %10 = ndims(%3)::Int64 
  %11 = -(%10, 1)::Int64 
  %12 = getproperty(%9, :weight)::Array{Float32, 4} 
  %13 = getproperty(%9, :weight)::Array{Float32, 4} 
  %14 = ndims(%13)::Int64 
  %15 = -(%14, 1)::Int64 
  %16 = size(%12, %15)::Int64 
  %17 = getproperty(%9, :groups)::Int64 
  %18 = *(%16, %17)::Int64 
  %19 = Pair(%11, %18)::Pair{Int64, Int64} 
  %20 = _size_check(%9, %3, %19)::Bool 
  %21 = finalize(%18)::Nothing 
  const %22 = fast_act::typeof(NNlib.fast_act)
  %23 = getproperty(%9, :σ)::typeof(relu) 
  const %24 = nothing::Nothing
  %25 = conv_dims(%9, %3)::DenseConvDims{2, 2, 2, 4, 2} 
  %26 = _match_eltype(%9, %3)::Array{Float32, 4} 
  const %27 = +::typeof(+)
  %28 = getproperty(%9, :weight)::Array{Float32, 4} 
  %29 = conv(%26, %28, %25)::Array{Float32, 4} 
  %30 = getproperty(%9, :bias)::Vector{Float32} 
  %31 = getproperty(%9, :stride)::Tuple{Int64, Int64} 
  const %32 = reshape::typeof(reshape)
  %33 = tuple(%30)::Tuple{Vector{Float32}} 
  %34 = __new__(Flux.var"#227#228")::Flux.var"#227#228" 
  %35 = map(%34, %31)::Tuple{Int64, Int64} 
  %36 = tuple(Colon(), 1)::Tuple{Colon, Int64} 
  %37 = check_variable_length(%33, 1, 32)::Nothing 
  %38 = check_variable_length(%35, 2, 34)::Nothing 
  %39 = getindex(%35, 1)::Int64 
  %40 = getindex(%35, 2)::Int64 
  %41 = check_variable_length(%36, 2, 35)::Nothing 
  %42 = %32(%30, %39, %40, Colon(), 1)::Array{Float32, 4} 
  %43 = broadcasted(%27, %29, %42)::Broadcasted{} 
  %44 = broadcasted(%23, %43)::Broadcasted{} 
  %45 = materialize(%44)::Array{Float32, 4} 
  %46 = finalize(%29)::Nothing 
  %47 = getindex(%8, 2)::MaxPool{2, 4} 
  const %48 = (:padding, :stride)::Tuple{Symbol, Symbol}
  %49 = apply_type(NamedTuple, %48)::UnionAll 
  %50 = getproperty(%47, :pad)::NTuple{4, Int64} 
  %51 = getproperty(%47, :stride)::Tuple{Int64, Int64} 
  %52 = tuple(%50, %51)::Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}} 
  %53 = %49(%52)::NamedTuple{(:padding, :stride), Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}}} 
  const %54 = PoolDims::UnionAll
  %55 = getproperty(%47, :k)::Tuple{Int64, Int64} 
  %56 = kwcall(%53, %54, %45, %55)::PoolDims{2, 2, 2, 4, 2} 
  %57 = maxpool(%45, %56)::Array{Float32, 4} 
  %58 = finalize(%45)::Nothing 
  %59 = getindex(%8, 3)::Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}} 
  %60 = ndims(%57)::Int64 
  %61 = -(%60, 1)::Int64 
  %62 = getproperty(%59, :weight)::Array{Float32, 4} 
  %63 = getproperty(%59, :weight)::Array{Float32, 4} 
  %64 = ndims(%63)::Int64 
  %65 = -(%64, 1)::Int64 
  %66 = size(%62, %65)::Int64 
  %67 = getproperty(%59, :groups)::Int64 
  %68 = *(%66, %67)::Int64 
  %69 = Pair(%61, %68)::Pair{Int64, Int64} 
  %70 = _size_check(%59, %57, %69)::Bool 
  %71 = finalize(%68)::Nothing 
  const %72 = fast_act::typeof(NNlib.fast_act)
  %73 = getproperty(%59, :σ)::typeof(relu) 
  const %74 = nothing::Nothing
  %75 = conv_dims(%59, %57)::DenseConvDims{2, 2, 2, 4, 2} 
  %76 = _match_eltype(%59, %57)::Array{Float32, 4} 
  const %77 = +::typeof(+)
  %78 = getproperty(%59, :weight)::Array{Float32, 4} 
  %79 = conv(%76, %78, %75)::Array{Float32, 4} 
  %80 = finalize(%57)::Nothing 
  %81 = getproperty(%59, :bias)::Vector{Float32} 
  %82 = getproperty(%59, :stride)::Tuple{Int64, Int64} 
  const %83 = reshape::typeof(reshape)
  %84 = tuple(%81)::Tuple{Vector{Float32}} 
  %85 = __new__(Flux.var"#227#228")::Flux.var"#227#228" 
  %86 = map(%85, %82)::Tuple{Int64, Int64} 
  %87 = tuple(Colon(), 1)::Tuple{Colon, Int64} 
  %88 = check_variable_length(%84, 1, 79)::Nothing 
  %89 = check_variable_length(%86, 2, 81)::Nothing 
  %90 = getindex(%86, 1)::Int64 
  %91 = getindex(%86, 2)::Int64 
  %92 = check_variable_length(%87, 2, 82)::Nothing 
  %93 = %83(%81, %90, %91, Colon(), 1)::Array{Float32, 4} 
  %94 = broadcasted(%77, %79, %93)::Broadcasted{} 
  %95 = broadcasted(%73, %94)::Broadcasted{} 
  %96 = materialize(%95)::Array{Float32, 4} 
  %97 = finalize(%79)::Nothing 
  %98 = getindex(%8, 4)::MaxPool{2, 4} 
  const %99 = (:padding, :stride)::Tuple{Symbol, Symbol}
  %100 = apply_type(NamedTuple, %99)::UnionAll 
  %101 = getproperty(%98, :pad)::NTuple{4, Int64} 
  %102 = getproperty(%98, :stride)::Tuple{Int64, Int64} 
  %103 = tuple(%101, %102)::Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}} 
  %104 = %100(%103)::NamedTuple{(:padding, :stride), Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}}} 
  const %105 = PoolDims::UnionAll
  %106 = getproperty(%98, :k)::Tuple{Int64, Int64} 
  %107 = kwcall(%104, %105, %96, %106)::PoolDims{2, 2, 2, 4, 2} 
  %108 = maxpool(%96, %107)::Array{Float32, 4} 
  %109 = finalize(%96)::Nothing 
  %110 = getindex(%8, 5)::Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}} 
  %111 = ndims(%108)::Int64 
  %112 = -(%111, 1)::Int64 
  %113 = getproperty(%110, :weight)::Array{Float32, 4} 
  %114 = getproperty(%110, :weight)::Array{Float32, 4} 
  %115 = ndims(%114)::Int64 
  %116 = -(%115, 1)::Int64 
  %117 = size(%113, %116)::Int64 
  %118 = getproperty(%110, :groups)::Int64 
  %119 = *(%117, %118)::Int64 
  %120 = Pair(%112, %119)::Pair{Int64, Int64} 
  %121 = _size_check(%110, %108, %120)::Bool 
  %122 = finalize(%119)::Nothing 
  const %123 = fast_act::typeof(NNlib.fast_act)
  %124 = getproperty(%110, :σ)::typeof(relu) 
  const %125 = nothing::Nothing
  %126 = conv_dims(%110, %108)::DenseConvDims{2, 2, 2, 4, 2} 
  %127 = _match_eltype(%110, %108)::Array{Float32, 4} 
  const %128 = +::typeof(+)
  %129 = getproperty(%110, :weight)::Array{Float32, 4} 
  %130 = conv(%127, %129, %126)::Array{Float32, 4} 
  %131 = finalize(%108)::Nothing 
  %132 = getproperty(%110, :bias)::Vector{Float32} 
  %133 = getproperty(%110, :stride)::Tuple{Int64, Int64} 
  const %134 = reshape::typeof(reshape)
  %135 = tuple(%132)::Tuple{Vector{Float32}} 
  %136 = __new__(Flux.var"#227#228")::Flux.var"#227#228" 
  %137 = map(%136, %133)::Tuple{Int64, Int64} 
  %138 = tuple(Colon(), 1)::Tuple{Colon, Int64} 
  %139 = check_variable_length(%135, 1, 126)::Nothing 
  %140 = check_variable_length(%137, 2, 128)::Nothing 
  %141 = getindex(%137, 1)::Int64 
  %142 = getindex(%137, 2)::Int64 
  %143 = check_variable_length(%138, 2, 129)::Nothing 
  %144 = %134(%132, %141, %142, Colon(), 1)::Array{Float32, 4} 
  %145 = broadcasted(%128, %130, %144)::Broadcasted{} 
  %146 = broadcasted(%124, %145)::Broadcasted{} 
  %147 = materialize(%146)::Array{Float32, 4} 
  %148 = finalize(%130)::Nothing 
  %149 = getindex(%8, 6)::Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}} 
  %150 = ndims(%147)::Int64 
  %151 = -(%150, 1)::Int64 
  %152 = getproperty(%149, :weight)::Array{Float32, 4} 
  %153 = getproperty(%149, :weight)::Array{Float32, 4} 
  %154 = ndims(%153)::Int64 
  %155 = -(%154, 1)::Int64 
  %156 = size(%152, %155)::Int64 
  %157 = getproperty(%149, :groups)::Int64 
  %158 = *(%156, %157)::Int64 
  %159 = Pair(%151, %158)::Pair{Int64, Int64} 
  %160 = _size_check(%149, %147, %159)::Bool 
  %161 = finalize(%158)::Nothing 
  const %162 = fast_act::typeof(NNlib.fast_act)
  %163 = getproperty(%149, :σ)::typeof(relu) 
  const %164 = nothing::Nothing
  %165 = conv_dims(%149, %147)::DenseConvDims{2, 2, 2, 4, 2} 
  %166 = _match_eltype(%149, %147)::Array{Float32, 4} 
  const %167 = +::typeof(+)
  %168 = getproperty(%149, :weight)::Array{Float32, 4} 
  %169 = conv(%166, %168, %165)::Array{Float32, 4} 
  %170 = finalize(%147)::Nothing 
  %171 = getproperty(%149, :bias)::Vector{Float32} 
  %172 = getproperty(%149, :stride)::Tuple{Int64, Int64} 
  const %173 = reshape::typeof(reshape)
  %174 = tuple(%171)::Tuple{Vector{Float32}} 
  %175 = __new__(Flux.var"#227#228")::Flux.var"#227#228" 
  %176 = map(%175, %172)::Tuple{Int64, Int64} 
  %177 = tuple(Colon(), 1)::Tuple{Colon, Int64} 
  %178 = check_variable_length(%174, 1, 162)::Nothing 
  %179 = check_variable_length(%176, 2, 164)::Nothing 
  %180 = getindex(%176, 1)::Int64 
  %181 = getindex(%176, 2)::Int64 
  %182 = check_variable_length(%177, 2, 165)::Nothing 
  %183 = %173(%171, %180, %181, Colon(), 1)::Array{Float32, 4} 
  %184 = broadcasted(%167, %169, %183)::Broadcasted{} 
  %185 = broadcasted(%163, %184)::Broadcasted{} 
  %186 = materialize(%185)::Array{Float32, 4} 
  %187 = finalize(%169)::Nothing 
  %188 = getindex(%8, 7)::Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}} 
  %189 = ndims(%186)::Int64 
  %190 = -(%189, 1)::Int64 
  %191 = getproperty(%188, :weight)::Array{Float32, 4} 
  %192 = getproperty(%188, :weight)::Array{Float32, 4} 
  %193 = ndims(%192)::Int64 
  %194 = -(%193, 1)::Int64 
  %195 = size(%191, %194)::Int64 
  %196 = getproperty(%188, :groups)::Int64 
  %197 = *(%195, %196)::Int64 
  %198 = Pair(%190, %197)::Pair{Int64, Int64} 
  %199 = _size_check(%188, %186, %198)::Bool 
  %200 = finalize(%197)::Nothing 
  const %201 = fast_act::typeof(NNlib.fast_act)
  %202 = getproperty(%188, :σ)::typeof(relu) 
  const %203 = nothing::Nothing
  %204 = conv_dims(%188, %186)::DenseConvDims{2, 2, 2, 4, 2} 
  %205 = _match_eltype(%188, %186)::Array{Float32, 4} 
  const %206 = +::typeof(+)
  %207 = getproperty(%188, :weight)::Array{Float32, 4} 
  %208 = conv(%205, %207, %204)::Array{Float32, 4} 
  %209 = finalize(%186)::Nothing 
  %210 = getproperty(%188, :bias)::Vector{Float32} 
  %211 = getproperty(%188, :stride)::Tuple{Int64, Int64} 
  const %212 = reshape::typeof(reshape)
  %213 = tuple(%210)::Tuple{Vector{Float32}} 
  %214 = __new__(Flux.var"#227#228")::Flux.var"#227#228" 
  %215 = map(%214, %211)::Tuple{Int64, Int64} 
  %216 = tuple(Colon(), 1)::Tuple{Colon, Int64} 
  %217 = check_variable_length(%213, 1, 198)::Nothing 
  %218 = check_variable_length(%215, 2, 200)::Nothing 
  %219 = getindex(%215, 1)::Int64 
  %220 = getindex(%215, 2)::Int64 
  %221 = check_variable_length(%216, 2, 201)::Nothing 
  %222 = %212(%210, %219, %220, Colon(), 1)::Array{Float32, 4} 
  %223 = broadcasted(%206, %208, %222)::Broadcasted{} 
  %224 = broadcasted(%202, %223)::Broadcasted{} 
  %225 = materialize(%224)::Array{Float32, 4} 
  %226 = finalize(%208)::Nothing 
  %227 = getindex(%8, 8)::MaxPool{2, 4} 
  const %228 = (:padding, :stride)::Tuple{Symbol, Symbol}
  %229 = apply_type(NamedTuple, %228)::UnionAll 
  %230 = getproperty(%227, :pad)::NTuple{4, Int64} 
  %231 = getproperty(%227, :stride)::Tuple{Int64, Int64} 
  %232 = tuple(%230, %231)::Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}} 
  %233 = %229(%232)::NamedTuple{(:padding, :stride), Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}}} 
  const %234 = PoolDims::UnionAll
  %235 = getproperty(%227, :k)::Tuple{Int64, Int64} 
  %236 = kwcall(%233, %234, %225, %235)::PoolDims{2, 2, 2, 4, 2} 
  %237 = maxpool(%225, %236)::Array{Float32, 4} 
  %238 = finalize(%225)::Nothing 
  %239 = getindex(%6, 2)::Chain{Tuple{AdaptiveMeanPool{4, 2}, typeof(flatten), Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}} 
  %240 = getproperty(%239, :layers)::Tuple{AdaptiveMeanPool{4, 2}, typeof(flatten), Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}} 
  %241 = getindex(%240, 1)::AdaptiveMeanPool{4, 2} 
  %242 = size(%237)::NTuple{4, Int64} 
  %243 = lastindex(%242)::Int64 
  %244 = -(%243, 2)::Int64 
  %245 = Colon()(1, %244)::UnitRange{Int64} 
  %246 = getindex(%242, %245)::Tuple{Int64, Int64} 
  %247 = getproperty(%241, :out)::Tuple{Int64, Int64} 
  %248 = tuple()::Tuple{} 
  const %249 = nothing::Nothing
  %250 = broadcastable(%246)::Tuple{Int64, Int64} 
  %251 = broadcastable(%247)::Tuple{Int64, Int64} 
  %252 = map(Base.Broadcast.broadcastable, %248)::Tuple{} 
  const %253 = broadcasted::typeof(Base.Broadcast.broadcasted)
  const %254 = combine_styles::typeof(Base.Broadcast.combine_styles)
  %255 = tuple(%250, %251)::Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}} 
  %256 = check_variable_length(%255, 2, 238)::Nothing 
  %257 = check_variable_length(%252, 0, 235)::Nothing 
  %258 = %254(%250, %251)::Base.Broadcast.Style{Tuple} 
  %259 = tuple(%258, div, %250, %251)::Tuple{Base.Broadcast.Style{Tuple}, typeof(div), Tuple{Int64, Int64}, Tuple{Int64, Int64}} 
  %260 = check_variable_length(%259, 4, 242)::Nothing 
  %261 = check_variable_length(%252, 0, 235)::Nothing 
  %262 = %253(%258, div, %250, %251)::Broadcasted{} 
  %263 = materialize(%262)::Tuple{Int64, Int64} 
  const %264 = -::typeof(-)
  const %265 = *::typeof(*)
  %266 = broadcasted(-, %247, 1)::Broadcasted{} 
  %267 = broadcasted(%265, %266, %263)::Broadcasted{} 
  %268 = broadcasted(%264, %246, %267)::Broadcasted{} 
  %269 = materialize(%268)::Tuple{Int64, Int64} 
  const %270 = 0::Int64
  const %271 = (:padding, :stride)::Tuple{Symbol, Symbol}
  %272 = apply_type(NamedTuple, %271)::UnionAll 
  %273 = tuple(%270, %263)::Tuple{Int64, Tuple{Int64, Int64}} 
  %274 = %272(%273)::NamedTuple{(:padding, :stride), Tuple{Int64, Tuple{Int64, Int64}}} 
  %275 = kwcall(%274, PoolDims, %237, %269)::PoolDims{2, 2, 2, 4, 2} 
  %276 = meanpool(%237, %275)::Array{Float32, 4} 
  %277 = finalize(%269)::Nothing 
  %278 = finalize(%263)::Nothing 
  %279 = finalize(%237)::Nothing 
  %280 = getindex(%240, 2)::typeof(flatten) 
  const %281 = Colon()::Colon
  const %282 = 4::Int64
  %283 = size(%276, %282)::Int64 
  %284 = reshape(%276, %281, %283)::Matrix{Float32} 
  %285 = getindex(%240, 3)::Dropout{Float64, Colon, Random.TaskLocalRNG} 
  %286 = getproperty(%285, :p)::Float64 
  %287 = getproperty(%285, :active)::Nothing 
  %288 = isnothing(%287)::Bool 
  const %289 = within_gradient::typeof(NNlib.within_gradient)
  %290 = %289(%284)::Bool 
  %291 = *(%286, %290)::Float64 
  const %292 = (:dims,)::Tuple{Symbol}
  %293 = apply_type(NamedTuple, %292)::UnionAll 
  %294 = getproperty(%285, :dims)::Colon 
  %295 = tuple(%294)::Tuple{Colon} 
  %296 = %293(%295)::NamedTuple{(:dims,), Tuple{Colon}} 
  const %297 = dropout::typeof(dropout)
  %298 = getproperty(%285, :rng)::Random.TaskLocalRNG 
  %299 = kwcall(%296, %297, %298, %284, %291)::Matrix{Float32} 
  %300 = getindex(%240, 4)::Dense{typeof(relu), Matrix{Float32}, Vector{Float32}} 
  %301 = getproperty(%300, :weight)::Matrix{Float32} 
  %302 = size(%301, 2)::Int64 
  %303 = Pair(1, %302)::Pair{Int64, Int64} 
  %304 = _size_check(%300, %299, %303)::Bool 
  const %305 = fast_act::typeof(NNlib.fast_act)
  %306 = getproperty(%300, :σ)::typeof(relu) 
  const %307 = nothing::Nothing
  %308 = _match_eltype(%300, %299)::Matrix{Float32} 
  const %309 = +::typeof(+)
  %310 = getproperty(%300, :weight)::Matrix{Float32} 
  %311 = *(%310, %308)::Matrix{Float32} 
  %312 = finalize(%291)::Nothing 
  %313 = finalize(%276)::Nothing 
  %314 = getproperty(%300, :bias)::Vector{Float32} 
  %315 = broadcasted(%309, %311, %314)::Broadcasted{} 
  %316 = broadcasted(%306, %315)::Broadcasted{} 
  %317 = materialize(%316)::Matrix{Float32} 
  %318 = finalize(%311)::Nothing 
  %319 = getindex(%240, 5)::Dropout{Float64, Colon, Random.TaskLocalRNG} 
  %320 = getproperty(%319, :p)::Float64 
  %321 = getproperty(%319, :active)::Nothing 
  %322 = isnothing(%321)::Bool 
  const %323 = within_gradient::typeof(NNlib.within_gradient)
  %324 = %323(%317)::Bool 
  %325 = *(%320, %324)::Float64 
  const %326 = (:dims,)::Tuple{Symbol}
  %327 = apply_type(NamedTuple, %326)::UnionAll 
  %328 = getproperty(%319, :dims)::Colon 
  %329 = tuple(%328)::Tuple{Colon} 
  %330 = %327(%329)::NamedTuple{(:dims,), Tuple{Colon}} 
  const %331 = dropout::typeof(dropout)
  %332 = getproperty(%319, :rng)::Random.TaskLocalRNG 
  %333 = kwcall(%330, %331, %332, %317, %325)::Matrix{Float32} 
  %334 = getindex(%240, 6)::Dense{typeof(relu), Matrix{Float32}, Vector{Float32}} 
  %335 = getproperty(%334, :weight)::Matrix{Float32} 
  %336 = size(%335, 2)::Int64 
  %337 = Pair(1, %336)::Pair{Int64, Int64} 
  %338 = _size_check(%334, %333, %337)::Bool 
  const %339 = fast_act::typeof(NNlib.fast_act)
  %340 = getproperty(%334, :σ)::typeof(relu) 
  const %341 = nothing::Nothing
  %342 = _match_eltype(%334, %333)::Matrix{Float32} 
  const %343 = +::typeof(+)
  %344 = getproperty(%334, :weight)::Matrix{Float32} 
  %345 = *(%344, %342)::Matrix{Float32} 
  %346 = finalize(%325)::Nothing 
  %347 = finalize(%317)::Nothing 
  %348 = getproperty(%334, :bias)::Vector{Float32} 
  %349 = broadcasted(%343, %345, %348)::Broadcasted{} 
  %350 = broadcasted(%340, %349)::Broadcasted{} 
  %351 = materialize(%350)::Matrix{Float32} 
  %352 = finalize(%345)::Nothing 
  %353 = getindex(%240, 7)::Dense{typeof(identity), Matrix{Float32}, Vector{Float32}} 
  %354 = getproperty(%353, :weight)::Matrix{Float32} 
  %355 = size(%354, 2)::Int64 
  %356 = Pair(1, %355)::Pair{Int64, Int64} 
  %357 = _size_check(%353, %351, %356)::Bool 
  const %358 = fast_act::typeof(NNlib.fast_act)
  %359 = getproperty(%353, :σ)::typeof(identity) 
  const %360 = nothing::Nothing
  %361 = _match_eltype(%353, %351)::Matrix{Float32} 
  const %362 = +::typeof(+)
  %363 = getproperty(%353, :weight)::Matrix{Float32} 
  %364 = *(%363, %361)::Matrix{Float32} 
  %365 = finalize(%351)::Nothing 
  %366 = getproperty(%353, :bias)::Vector{Float32} 
  %367 = broadcasted(%362, %364, %366)::Broadcasted{} 
  %368 = broadcasted(%359, %367)::Broadcasted{} 
  %369 = materialize(%368)::Matrix{Float32} 
  %370 = finalize(%364)::Nothing 
  const %371 = nothing::Nothing
  %372 = _check_sizes(%369, %4)::Nothing 
  const %373 = abs2::typeof(abs2)
  %374 = broadcasted(-, %369, %4)::Broadcasted{} 
  %375 = tuple()::Tuple{} 
  const %376 = nothing::Nothing
  %377 = broadcastable(%374)::Broadcasted{} 
  %378 = map(Base.Broadcast.broadcastable, %375)::Tuple{} 
  const %379 = broadcasted::typeof(Base.Broadcast.broadcasted)
  const %380 = combine_styles::typeof(Base.Broadcast.combine_styles)
  %381 = tuple(%377)::Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(-), Tuple{Matrix{Float32}, Matrix{Float32}}}} 
  %382 = check_variable_length(%381, 1, 353)::Nothing 
  %383 = check_variable_length(%378, 0, 350)::Nothing 
  %384 = %380(%377)::Base.Broadcast.DefaultArrayStyle{2} 
  %385 = tuple(%384, %373, %377)::Tuple{Base.Broadcast.DefaultArrayStyle{2}, typeof(abs2), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(-), Tuple{Matrix{Float32}, Matrix{Float32}}}} 
  %386 = check_variable_length(%385, 3, 357)::Nothing 
  %387 = check_variable_length(%378, 0, 350)::Nothing 
  %388 = %379(%384, %373, %377)::Broadcasted{} 
  %389 = materialize(%388)::Matrix{Float32} 
  %390 = finalize(%369)::Nothing 
  %391 = mean(%389)::Float32 
