Tape{GradCtx}
  inp %1::typeof(loss)
  inp %2::Chain{Tuple{Chain{Tuple{Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}}}, Chain{Tuple{AdaptiveMeanPool{4, 2}, typeof(flatten), Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}}}
  inp %3::Array{Float32, 4}
  inp %4::Matrix{Float32}
  const %5 = mse::typeof(Flux.Losses.mse)
  %6 = getproperty(%2, :layers)::Tuple{Chain{Tuple{Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}}}, Chain{Tuple{AdaptiveMeanPool{4, 2}, typeof(flatten), Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}} 
  %7 = getindex(%6, 1)::Chain{Tuple{Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}}} 
  %8 = getproperty(%7, :layers)::Tuple{Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}} 
  %9 = getindex(%8, 1)::Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}} 
  %10 = ndims(%3)::Int64 
  %11 = -(%10, 1)::Int64 
  %12 = getproperty(%9, :weight)::Array{Float32, 4} 
  %13 = getproperty(%9, :weight)::Array{Float32, 4} 
  %14 = ndims(%13)::Int64 
  %15 = -(%14, 1)::Int64 
  %16 = size(%12, %15)::Int64 
  %17 = getproperty(%9, :groups)::Int64 
  %18 = *(%16, %17)::Int64 
  %19 = Pair(%11, %18)::Pair{Int64, Int64} 
  %20 = _size_check(%9, %3, %19)::Bool 
  const %21 = fast_act::typeof(NNlib.fast_act)
  %22 = getproperty(%9, :σ)::typeof(relu) 
  const %23 = nothing::Nothing
  %24 = conv_dims(%9, %3)::DenseConvDims{2, 2, 2, 4, 2} 
  %25 = _match_eltype(%9, %3)::Array{Float32, 4} 
  const %26 = +::typeof(+)
  %27 = getproperty(%9, :weight)::Array{Float32, 4} 
  %28 = conv(%25, %27, %24)::Array{Float32, 4} 
  %29 = getproperty(%9, :bias)::Vector{Float32} 
  %30 = getproperty(%9, :stride)::Tuple{Int64, Int64} 
  const %31 = reshape::typeof(reshape)
  %32 = tuple(%29)::Tuple{Vector{Float32}} 
  %33 = __new__(Flux.var"#227#228")::Flux.var"#227#228" 
  %34 = map(%33, %30)::Tuple{Int64, Int64} 
  %35 = tuple(Colon(), 1)::Tuple{Colon, Int64} 
  %36 = check_variable_length(%32, 1, 32)::Nothing 
  %37 = check_variable_length(%34, 2, 34)::Nothing 
  %38 = getindex(%34, 1)::Int64 
  %39 = getindex(%34, 2)::Int64 
  %40 = check_variable_length(%35, 2, 35)::Nothing 
  %41 = %31(%29, %38, %39, Colon(), 1)::Array{Float32, 4} 
  %42 = broadcasted(%26, %28, %41)::Broadcasted{} 
  %43 = broadcasted(%22, %42)::Broadcasted{} 
  %44 = materialize(%43)::Array{Float32, 4} 
  %45 = getindex(%8, 2)::MaxPool{2, 4} 
  const %46 = (:padding, :stride)::Tuple{Symbol, Symbol}
  %47 = apply_type(NamedTuple, %46)::UnionAll 
  %48 = getproperty(%45, :pad)::NTuple{4, Int64} 
  %49 = getproperty(%45, :stride)::Tuple{Int64, Int64} 
  %50 = tuple(%48, %49)::Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}} 
  %51 = %47(%50)::NamedTuple{(:padding, :stride), Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}}} 
  const %52 = PoolDims::UnionAll
  %53 = getproperty(%45, :k)::Tuple{Int64, Int64} 
  %54 = kwcall(%51, %52, %44, %53)::PoolDims{2, 2, 2, 4, 2} 
  %55 = maxpool(%44, %54)::Array{Float32, 4} 
  %56 = getindex(%8, 3)::Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}} 
  %57 = ndims(%55)::Int64 
  %58 = -(%57, 1)::Int64 
  %59 = getproperty(%56, :weight)::Array{Float32, 4} 
  %60 = getproperty(%56, :weight)::Array{Float32, 4} 
  %61 = ndims(%60)::Int64 
  %62 = -(%61, 1)::Int64 
  %63 = size(%59, %62)::Int64 
  %64 = getproperty(%56, :groups)::Int64 
  %65 = *(%63, %64)::Int64 
  %66 = Pair(%58, %65)::Pair{Int64, Int64} 
  %67 = _size_check(%56, %55, %66)::Bool 
  const %68 = fast_act::typeof(NNlib.fast_act)
  %69 = getproperty(%56, :σ)::typeof(relu) 
  const %70 = nothing::Nothing
  %71 = conv_dims(%56, %55)::DenseConvDims{2, 2, 2, 4, 2} 
  %72 = _match_eltype(%56, %55)::Array{Float32, 4} 
  const %73 = +::typeof(+)
  %74 = getproperty(%56, :weight)::Array{Float32, 4} 
  %75 = conv(%72, %74, %71)::Array{Float32, 4} 
  %76 = getproperty(%56, :bias)::Vector{Float32} 
  %77 = getproperty(%56, :stride)::Tuple{Int64, Int64} 
  const %78 = reshape::typeof(reshape)
  %79 = tuple(%76)::Tuple{Vector{Float32}} 
  %80 = __new__(Flux.var"#227#228")::Flux.var"#227#228" 
  %81 = map(%80, %77)::Tuple{Int64, Int64} 
  %82 = tuple(Colon(), 1)::Tuple{Colon, Int64} 
  %83 = check_variable_length(%79, 1, 79)::Nothing 
  %84 = check_variable_length(%81, 2, 81)::Nothing 
  %85 = getindex(%81, 1)::Int64 
  %86 = getindex(%81, 2)::Int64 
  %87 = check_variable_length(%82, 2, 82)::Nothing 
  %88 = %78(%76, %85, %86, Colon(), 1)::Array{Float32, 4} 
  %89 = broadcasted(%73, %75, %88)::Broadcasted{} 
  %90 = broadcasted(%69, %89)::Broadcasted{} 
  %91 = materialize(%90)::Array{Float32, 4} 
  %92 = getindex(%8, 4)::MaxPool{2, 4} 
  const %93 = (:padding, :stride)::Tuple{Symbol, Symbol}
  %94 = apply_type(NamedTuple, %93)::UnionAll 
  %95 = getproperty(%92, :pad)::NTuple{4, Int64} 
  %96 = getproperty(%92, :stride)::Tuple{Int64, Int64} 
  %97 = tuple(%95, %96)::Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}} 
  %98 = %94(%97)::NamedTuple{(:padding, :stride), Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}}} 
  const %99 = PoolDims::UnionAll
  %100 = getproperty(%92, :k)::Tuple{Int64, Int64} 
  %101 = kwcall(%98, %99, %91, %100)::PoolDims{2, 2, 2, 4, 2} 
  %102 = maxpool(%91, %101)::Array{Float32, 4} 
  %103 = getindex(%8, 5)::Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}} 
  %104 = ndims(%102)::Int64 
  %105 = -(%104, 1)::Int64 
  %106 = getproperty(%103, :weight)::Array{Float32, 4} 
  %107 = getproperty(%103, :weight)::Array{Float32, 4} 
  %108 = ndims(%107)::Int64 
  %109 = -(%108, 1)::Int64 
  %110 = size(%106, %109)::Int64 
  %111 = getproperty(%103, :groups)::Int64 
  %112 = *(%110, %111)::Int64 
  %113 = Pair(%105, %112)::Pair{Int64, Int64} 
  %114 = _size_check(%103, %102, %113)::Bool 
  const %115 = fast_act::typeof(NNlib.fast_act)
  %116 = getproperty(%103, :σ)::typeof(relu) 
  const %117 = nothing::Nothing
  %118 = conv_dims(%103, %102)::DenseConvDims{2, 2, 2, 4, 2} 
  %119 = _match_eltype(%103, %102)::Array{Float32, 4} 
  const %120 = +::typeof(+)
  %121 = getproperty(%103, :weight)::Array{Float32, 4} 
  %122 = conv(%119, %121, %118)::Array{Float32, 4} 
  %123 = getproperty(%103, :bias)::Vector{Float32} 
  %124 = getproperty(%103, :stride)::Tuple{Int64, Int64} 
  const %125 = reshape::typeof(reshape)
  %126 = tuple(%123)::Tuple{Vector{Float32}} 
  %127 = __new__(Flux.var"#227#228")::Flux.var"#227#228" 
  %128 = map(%127, %124)::Tuple{Int64, Int64} 
  %129 = tuple(Colon(), 1)::Tuple{Colon, Int64} 
  %130 = check_variable_length(%126, 1, 126)::Nothing 
  %131 = check_variable_length(%128, 2, 128)::Nothing 
  %132 = getindex(%128, 1)::Int64 
  %133 = getindex(%128, 2)::Int64 
  %134 = check_variable_length(%129, 2, 129)::Nothing 
  %135 = %125(%123, %132, %133, Colon(), 1)::Array{Float32, 4} 
  %136 = broadcasted(%120, %122, %135)::Broadcasted{} 
  %137 = broadcasted(%116, %136)::Broadcasted{} 
  %138 = materialize(%137)::Array{Float32, 4} 
  %139 = getindex(%8, 6)::Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}} 
  %140 = ndims(%138)::Int64 
  %141 = -(%140, 1)::Int64 
  %142 = getproperty(%139, :weight)::Array{Float32, 4} 
  %143 = getproperty(%139, :weight)::Array{Float32, 4} 
  %144 = ndims(%143)::Int64 
  %145 = -(%144, 1)::Int64 
  %146 = size(%142, %145)::Int64 
  %147 = getproperty(%139, :groups)::Int64 
  %148 = *(%146, %147)::Int64 
  %149 = Pair(%141, %148)::Pair{Int64, Int64} 
  %150 = _size_check(%139, %138, %149)::Bool 
  const %151 = fast_act::typeof(NNlib.fast_act)
  %152 = getproperty(%139, :σ)::typeof(relu) 
  const %153 = nothing::Nothing
  %154 = conv_dims(%139, %138)::DenseConvDims{2, 2, 2, 4, 2} 
  %155 = _match_eltype(%139, %138)::Array{Float32, 4} 
  const %156 = +::typeof(+)
  %157 = getproperty(%139, :weight)::Array{Float32, 4} 
  %158 = conv(%155, %157, %154)::Array{Float32, 4} 
  %159 = getproperty(%139, :bias)::Vector{Float32} 
  %160 = getproperty(%139, :stride)::Tuple{Int64, Int64} 
  const %161 = reshape::typeof(reshape)
  %162 = tuple(%159)::Tuple{Vector{Float32}} 
  %163 = __new__(Flux.var"#227#228")::Flux.var"#227#228" 
  %164 = map(%163, %160)::Tuple{Int64, Int64} 
  %165 = tuple(Colon(), 1)::Tuple{Colon, Int64} 
  %166 = check_variable_length(%162, 1, 162)::Nothing 
  %167 = check_variable_length(%164, 2, 164)::Nothing 
  %168 = getindex(%164, 1)::Int64 
  %169 = getindex(%164, 2)::Int64 
  %170 = check_variable_length(%165, 2, 165)::Nothing 
  %171 = %161(%159, %168, %169, Colon(), 1)::Array{Float32, 4} 
  %172 = broadcasted(%156, %158, %171)::Broadcasted{} 
  %173 = broadcasted(%152, %172)::Broadcasted{} 
  %174 = materialize(%173)::Array{Float32, 4} 
  %175 = getindex(%8, 7)::Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}} 
  %176 = ndims(%174)::Int64 
  %177 = -(%176, 1)::Int64 
  %178 = getproperty(%175, :weight)::Array{Float32, 4} 
  %179 = getproperty(%175, :weight)::Array{Float32, 4} 
  %180 = ndims(%179)::Int64 
  %181 = -(%180, 1)::Int64 
  %182 = size(%178, %181)::Int64 
  %183 = getproperty(%175, :groups)::Int64 
  %184 = *(%182, %183)::Int64 
  %185 = Pair(%177, %184)::Pair{Int64, Int64} 
  %186 = _size_check(%175, %174, %185)::Bool 
  const %187 = fast_act::typeof(NNlib.fast_act)
  %188 = getproperty(%175, :σ)::typeof(relu) 
  const %189 = nothing::Nothing
  %190 = conv_dims(%175, %174)::DenseConvDims{2, 2, 2, 4, 2} 
  %191 = _match_eltype(%175, %174)::Array{Float32, 4} 
  const %192 = +::typeof(+)
  %193 = getproperty(%175, :weight)::Array{Float32, 4} 
  %194 = conv(%191, %193, %190)::Array{Float32, 4} 
  %195 = getproperty(%175, :bias)::Vector{Float32} 
  %196 = getproperty(%175, :stride)::Tuple{Int64, Int64} 
  const %197 = reshape::typeof(reshape)
  %198 = tuple(%195)::Tuple{Vector{Float32}} 
  %199 = __new__(Flux.var"#227#228")::Flux.var"#227#228" 
  %200 = map(%199, %196)::Tuple{Int64, Int64} 
  %201 = tuple(Colon(), 1)::Tuple{Colon, Int64} 
  %202 = check_variable_length(%198, 1, 198)::Nothing 
  %203 = check_variable_length(%200, 2, 200)::Nothing 
  %204 = getindex(%200, 1)::Int64 
  %205 = getindex(%200, 2)::Int64 
  %206 = check_variable_length(%201, 2, 201)::Nothing 
  %207 = %197(%195, %204, %205, Colon(), 1)::Array{Float32, 4} 
  %208 = broadcasted(%192, %194, %207)::Broadcasted{} 
  %209 = broadcasted(%188, %208)::Broadcasted{} 
  %210 = materialize(%209)::Array{Float32, 4} 
  %211 = getindex(%8, 8)::MaxPool{2, 4} 
  const %212 = (:padding, :stride)::Tuple{Symbol, Symbol}
  %213 = apply_type(NamedTuple, %212)::UnionAll 
  %214 = getproperty(%211, :pad)::NTuple{4, Int64} 
  %215 = getproperty(%211, :stride)::Tuple{Int64, Int64} 
  %216 = tuple(%214, %215)::Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}} 
  %217 = %213(%216)::NamedTuple{(:padding, :stride), Tuple{NTuple{4, Int64}, Tuple{Int64, Int64}}} 
  const %218 = PoolDims::UnionAll
  %219 = getproperty(%211, :k)::Tuple{Int64, Int64} 
  %220 = kwcall(%217, %218, %210, %219)::PoolDims{2, 2, 2, 4, 2} 
  %221 = maxpool(%210, %220)::Array{Float32, 4} 
  %222 = getindex(%6, 2)::Chain{Tuple{AdaptiveMeanPool{4, 2}, typeof(flatten), Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}} 
  %223 = getproperty(%222, :layers)::Tuple{AdaptiveMeanPool{4, 2}, typeof(flatten), Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}} 
  %224 = getindex(%223, 1)::AdaptiveMeanPool{4, 2} 
  %225 = size(%221)::NTuple{4, Int64} 
  %226 = lastindex(%225)::Int64 
  %227 = -(%226, 2)::Int64 
  %228 = Colon()(1, %227)::UnitRange{Int64} 
  %229 = getindex(%225, %228)::Tuple{Int64, Int64} 
  %230 = getproperty(%224, :out)::Tuple{Int64, Int64} 
  %231 = tuple()::Tuple{} 
  const %232 = nothing::Nothing
  %233 = broadcastable(%229)::Tuple{Int64, Int64} 
  %234 = broadcastable(%230)::Tuple{Int64, Int64} 
  %235 = map(Base.Broadcast.broadcastable, %231)::Tuple{} 
  const %236 = broadcasted::typeof(Base.Broadcast.broadcasted)
  const %237 = combine_styles::typeof(Base.Broadcast.combine_styles)
  %238 = tuple(%233, %234)::Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}} 
  %239 = check_variable_length(%238, 2, 238)::Nothing 
  %240 = check_variable_length(%235, 0, 235)::Nothing 
  %241 = %237(%233, %234)::Base.Broadcast.Style{Tuple} 
  %242 = tuple(%241, div, %233, %234)::Tuple{Base.Broadcast.Style{Tuple}, typeof(div), Tuple{Int64, Int64}, Tuple{Int64, Int64}} 
  %243 = check_variable_length(%242, 4, 242)::Nothing 
  %244 = check_variable_length(%235, 0, 235)::Nothing 
  %245 = %236(%241, div, %233, %234)::Broadcasted{} 
  %246 = materialize(%245)::Tuple{Int64, Int64} 
  const %247 = -::typeof(-)
  const %248 = *::typeof(*)
  %249 = broadcasted(-, %230, 1)::Broadcasted{} 
  %250 = broadcasted(%248, %249, %246)::Broadcasted{} 
  %251 = broadcasted(%247, %229, %250)::Broadcasted{} 
  %252 = materialize(%251)::Tuple{Int64, Int64} 
  const %253 = 0::Int64
  const %254 = (:padding, :stride)::Tuple{Symbol, Symbol}
  %255 = apply_type(NamedTuple, %254)::UnionAll 
  %256 = tuple(%253, %246)::Tuple{Int64, Tuple{Int64, Int64}} 
  %257 = %255(%256)::NamedTuple{(:padding, :stride), Tuple{Int64, Tuple{Int64, Int64}}} 
  %258 = kwcall(%257, PoolDims, %221, %252)::PoolDims{2, 2, 2, 4, 2} 
  %259 = meanpool(%221, %258)::Array{Float32, 4} 
  %260 = getindex(%223, 2)::typeof(flatten) 
  const %261 = Colon()::Colon
  const %262 = 4::Int64
  %263 = size(%259, %262)::Int64 
  %264 = reshape(%259, %261, %263)::Matrix{Float32} 
  %265 = getindex(%223, 3)::Dropout{Float64, Colon, Random.TaskLocalRNG} 
  %266 = getproperty(%265, :p)::Float64 
  %267 = getproperty(%265, :active)::Nothing 
  %268 = isnothing(%267)::Bool 
  const %269 = within_gradient::typeof(NNlib.within_gradient)
  %270 = %269(%264)::Bool 
  %271 = *(%266, %270)::Float64 
  const %272 = (:dims,)::Tuple{Symbol}
  %273 = apply_type(NamedTuple, %272)::UnionAll 
  %274 = getproperty(%265, :dims)::Colon 
  %275 = tuple(%274)::Tuple{Colon} 
  %276 = %273(%275)::NamedTuple{(:dims,), Tuple{Colon}} 
  const %277 = dropout::typeof(dropout)
  %278 = getproperty(%265, :rng)::Random.TaskLocalRNG 
  %279 = kwcall(%276, %277, %278, %264, %271)::Matrix{Float32} 
  %280 = getindex(%223, 4)::Dense{typeof(relu), Matrix{Float32}, Vector{Float32}} 
  %281 = getproperty(%280, :weight)::Matrix{Float32} 
  %282 = size(%281, 2)::Int64 
  %283 = Pair(1, %282)::Pair{Int64, Int64} 
  %284 = _size_check(%280, %279, %283)::Bool 
  const %285 = fast_act::typeof(NNlib.fast_act)
  %286 = getproperty(%280, :σ)::typeof(relu) 
  const %287 = nothing::Nothing
  %288 = _match_eltype(%280, %279)::Matrix{Float32} 
  const %289 = +::typeof(+)
  %290 = getproperty(%280, :weight)::Matrix{Float32} 
  %291 = *(%290, %288)::Matrix{Float32} 
  %292 = getproperty(%280, :bias)::Vector{Float32} 
  %293 = broadcasted(%289, %291, %292)::Broadcasted{} 
  %294 = broadcasted(%286, %293)::Broadcasted{} 
  %295 = materialize(%294)::Matrix{Float32} 
  %296 = getindex(%223, 5)::Dropout{Float64, Colon, Random.TaskLocalRNG} 
  %297 = getproperty(%296, :p)::Float64 
  %298 = getproperty(%296, :active)::Nothing 
  %299 = isnothing(%298)::Bool 
  const %300 = within_gradient::typeof(NNlib.within_gradient)
  %301 = %300(%295)::Bool 
  %302 = *(%297, %301)::Float64 
  const %303 = (:dims,)::Tuple{Symbol}
  %304 = apply_type(NamedTuple, %303)::UnionAll 
  %305 = getproperty(%296, :dims)::Colon 
  %306 = tuple(%305)::Tuple{Colon} 
  %307 = %304(%306)::NamedTuple{(:dims,), Tuple{Colon}} 
  const %308 = dropout::typeof(dropout)
  %309 = getproperty(%296, :rng)::Random.TaskLocalRNG 
  %310 = kwcall(%307, %308, %309, %295, %302)::Matrix{Float32} 
  %311 = getindex(%223, 6)::Dense{typeof(relu), Matrix{Float32}, Vector{Float32}} 
  %312 = getproperty(%311, :weight)::Matrix{Float32} 
  %313 = size(%312, 2)::Int64 
  %314 = Pair(1, %313)::Pair{Int64, Int64} 
  %315 = _size_check(%311, %310, %314)::Bool 
  const %316 = fast_act::typeof(NNlib.fast_act)
  %317 = getproperty(%311, :σ)::typeof(relu) 
  const %318 = nothing::Nothing
  %319 = _match_eltype(%311, %310)::Matrix{Float32} 
  const %320 = +::typeof(+)
  %321 = getproperty(%311, :weight)::Matrix{Float32} 
  %322 = *(%321, %319)::Matrix{Float32} 
  %323 = getproperty(%311, :bias)::Vector{Float32} 
  %324 = broadcasted(%320, %322, %323)::Broadcasted{} 
  %325 = broadcasted(%317, %324)::Broadcasted{} 
  %326 = materialize(%325)::Matrix{Float32} 
  %327 = getindex(%223, 7)::Dense{typeof(identity), Matrix{Float32}, Vector{Float32}} 
  %328 = getproperty(%327, :weight)::Matrix{Float32} 
  %329 = size(%328, 2)::Int64 
  %330 = Pair(1, %329)::Pair{Int64, Int64} 
  %331 = _size_check(%327, %326, %330)::Bool 
  const %332 = fast_act::typeof(NNlib.fast_act)
  %333 = getproperty(%327, :σ)::typeof(identity) 
  const %334 = nothing::Nothing
  %335 = _match_eltype(%327, %326)::Matrix{Float32} 
  const %336 = +::typeof(+)
  %337 = getproperty(%327, :weight)::Matrix{Float32} 
  %338 = *(%337, %335)::Matrix{Float32} 
  %339 = getproperty(%327, :bias)::Vector{Float32} 
  %340 = broadcasted(%336, %338, %339)::Broadcasted{} 
  %341 = broadcasted(%333, %340)::Broadcasted{} 
  %342 = materialize(%341)::Matrix{Float32} 
  const %343 = nothing::Nothing
  %344 = _check_sizes(%342, %4)::Nothing 
  const %345 = abs2::typeof(abs2)
  %346 = broadcasted(-, %342, %4)::Broadcasted{} 
  %347 = tuple()::Tuple{} 
  const %348 = nothing::Nothing
  %349 = broadcastable(%346)::Broadcasted{} 
  %350 = map(Base.Broadcast.broadcastable, %347)::Tuple{} 
  const %351 = broadcasted::typeof(Base.Broadcast.broadcasted)
  const %352 = combine_styles::typeof(Base.Broadcast.combine_styles)
  %353 = tuple(%349)::Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(-), Tuple{Matrix{Float32}, Matrix{Float32}}}} 
  %354 = check_variable_length(%353, 1, 353)::Nothing 
  %355 = check_variable_length(%350, 0, 350)::Nothing 
  %356 = %352(%349)::Base.Broadcast.DefaultArrayStyle{2} 
  %357 = tuple(%356, %345, %349)::Tuple{Base.Broadcast.DefaultArrayStyle{2}, typeof(abs2), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(-), Tuple{Matrix{Float32}, Matrix{Float32}}}} 
  %358 = check_variable_length(%357, 3, 357)::Nothing 
  %359 = check_variable_length(%350, 0, 350)::Nothing 
  %360 = %351(%356, %345, %349)::Broadcasted{} 
  %361 = materialize(%360)::Matrix{Float32} 
  %362 = mean(%361)::Float32 
