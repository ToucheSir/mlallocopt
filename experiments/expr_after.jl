:(function var"##tape_loss#664"(x1::typeof(loss), x2::Chain{Tuple{Chain{Tuple{Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}, MaxPool{2, 4}}}, Chain{Tuple{AdaptiveMeanPool{4, 2}, typeof(flatten), Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dropout{Float64, Colon, Random.TaskLocalRNG}, Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}}}, x3::Array{Float32, 4}, x4::Matrix{Float32})
      x5 = Flux.Losses.mse
      x6 = (getproperty)(x2, :layers)
      x7 = (getindex)(x6, 1)
      x8 = (getproperty)(x7, :layers)
      x9 = (getindex)(x8, 1)
      x10 = (ndims)(x3)
      x11 = (-)(x10, 1)
      x12 = (getproperty)(x9, :weight)
      x13 = (getproperty)(x9, :weight)
      x14 = (ndims)(x13)
      x15 = (-)(x14, 1)
      x16 = (size)(x12, x15)
      x17 = (getproperty)(x9, :groups)
      x18 = (*)(x16, x17)
      x19 = (Pair)(x11, x18)
      x20 = (Flux._size_check)(x9, x3, x19)
      x21 = (finalize)(x18)
      x22 = NNlib.fast_act
      x23 = (getproperty)(x9, :σ)
      x24 = nothing
      x25 = (Flux.conv_dims)(x9, x3)
      x26 = (Flux._match_eltype)(x9, x3)
      x27 = +
      x28 = (getproperty)(x9, :weight)
      x29 = (NNlib.conv)(x26, x28, x25)
      x30 = (getproperty)(x9, :bias)
      x31 = (getproperty)(x9, :stride)
      x32 = reshape
      x33 = (tuple)(x30)
      x34 = (Umlaut.__new__)(Flux.var"#227#228")
      x35 = (map)(x34, x31)
      x36 = (tuple)(Colon(), 1)
      x37 = (Umlaut.check_variable_length)(x33, 1, 32)
      x38 = (Umlaut.check_variable_length)(x35, 2, 34)
      x39 = (getindex)(x35, 1)
      x40 = (getindex)(x35, 2)
      x41 = (Umlaut.check_variable_length)(x36, 2, 35)
      x42 = x32(x30, x39, x40, Colon(), 1)
      x43 = (Base.Broadcast.broadcasted)(x27, x29, x42)
      x44 = (Base.Broadcast.broadcasted)(x23, x43)
      x45 = (Base.Broadcast.materialize)(x44)
      x46 = (finalize)(x29)
      x47 = (getindex)(x8, 2)
      x48 = (:padding, :stride)
      x49 = (Core.apply_type)(NamedTuple, x48)
      x50 = (getproperty)(x47, :pad)
      x51 = (getproperty)(x47, :stride)
      x52 = (tuple)(x50, x51)
      x53 = x49(x52)
      x54 = PoolDims
      x55 = (getproperty)(x47, :k)
      x56 = (Core.kwcall)(x53, x54, x45, x55)
      x57 = (NNlib.maxpool)(x45, x56)
      x58 = (finalize)(x45)
      x59 = (getindex)(x8, 3)
      x60 = (ndims)(x57)
      x61 = (-)(x60, 1)
      x62 = (getproperty)(x59, :weight)
      x63 = (getproperty)(x59, :weight)
      x64 = (ndims)(x63)
      x65 = (-)(x64, 1)
      x66 = (size)(x62, x65)
      x67 = (getproperty)(x59, :groups)
      x68 = (*)(x66, x67)
      x69 = (Pair)(x61, x68)
      x70 = (Flux._size_check)(x59, x57, x69)
      x71 = (finalize)(x68)
      x72 = NNlib.fast_act
      x73 = (getproperty)(x59, :σ)
      x74 = nothing
      x75 = (Flux.conv_dims)(x59, x57)
      x76 = (Flux._match_eltype)(x59, x57)
      x77 = +
      x78 = (getproperty)(x59, :weight)
      x79 = (NNlib.conv)(x76, x78, x75)
      x80 = (finalize)(x57)
      x81 = (getproperty)(x59, :bias)
      x82 = (getproperty)(x59, :stride)
      x83 = reshape
      x84 = (tuple)(x81)
      x85 = (Umlaut.__new__)(Flux.var"#227#228")
      x86 = (map)(x85, x82)
      x87 = (tuple)(Colon(), 1)
      x88 = (Umlaut.check_variable_length)(x84, 1, 79)
      x89 = (Umlaut.check_variable_length)(x86, 2, 81)
      x90 = (getindex)(x86, 1)
      x91 = (getindex)(x86, 2)
      x92 = (Umlaut.check_variable_length)(x87, 2, 82)
      x93 = x83(x81, x90, x91, Colon(), 1)
      x94 = (Base.Broadcast.broadcasted)(x77, x79, x93)
      x95 = (Base.Broadcast.broadcasted)(x73, x94)
      x96 = (Base.Broadcast.materialize)(x95)
      x97 = (finalize)(x79)
      x98 = (getindex)(x8, 4)
      x99 = (:padding, :stride)
      x100 = (Core.apply_type)(NamedTuple, x99)
      x101 = (getproperty)(x98, :pad)
      x102 = (getproperty)(x98, :stride)
      x103 = (tuple)(x101, x102)
      x104 = x100(x103)
      x105 = PoolDims
      x106 = (getproperty)(x98, :k)
      x107 = (Core.kwcall)(x104, x105, x96, x106)
      x108 = (NNlib.maxpool)(x96, x107)
      x109 = (finalize)(x96)
      x110 = (getindex)(x8, 5)
      x111 = (ndims)(x108)
      x112 = (-)(x111, 1)
      x113 = (getproperty)(x110, :weight)
      x114 = (getproperty)(x110, :weight)
      x115 = (ndims)(x114)
      x116 = (-)(x115, 1)
      x117 = (size)(x113, x116)
      x118 = (getproperty)(x110, :groups)
      x119 = (*)(x117, x118)
      x120 = (Pair)(x112, x119)
      x121 = (Flux._size_check)(x110, x108, x120)
      x122 = (finalize)(x119)
      x123 = NNlib.fast_act
      x124 = (getproperty)(x110, :σ)
      x125 = nothing
      x126 = (Flux.conv_dims)(x110, x108)
      x127 = (Flux._match_eltype)(x110, x108)
      x128 = +
      x129 = (getproperty)(x110, :weight)
      x130 = (NNlib.conv)(x127, x129, x126)
      x131 = (finalize)(x108)
      x132 = (getproperty)(x110, :bias)
      x133 = (getproperty)(x110, :stride)
      x134 = reshape
      x135 = (tuple)(x132)
      x136 = (Umlaut.__new__)(Flux.var"#227#228")
      x137 = (map)(x136, x133)
      x138 = (tuple)(Colon(), 1)
      x139 = (Umlaut.check_variable_length)(x135, 1, 126)
      x140 = (Umlaut.check_variable_length)(x137, 2, 128)
      x141 = (getindex)(x137, 1)
      x142 = (getindex)(x137, 2)
      x143 = (Umlaut.check_variable_length)(x138, 2, 129)
      x144 = x134(x132, x141, x142, Colon(), 1)
      x145 = (Base.Broadcast.broadcasted)(x128, x130, x144)
      x146 = (Base.Broadcast.broadcasted)(x124, x145)
      x147 = (Base.Broadcast.materialize)(x146)
      x148 = (finalize)(x130)
      x149 = (getindex)(x8, 6)
      x150 = (ndims)(x147)
      x151 = (-)(x150, 1)
      x152 = (getproperty)(x149, :weight)
      x153 = (getproperty)(x149, :weight)
      x154 = (ndims)(x153)
      x155 = (-)(x154, 1)
      x156 = (size)(x152, x155)
      x157 = (getproperty)(x149, :groups)
      x158 = (*)(x156, x157)
      x159 = (Pair)(x151, x158)
      x160 = (Flux._size_check)(x149, x147, x159)
      x161 = (finalize)(x158)
      x162 = NNlib.fast_act
      x163 = (getproperty)(x149, :σ)
      x164 = nothing
      x165 = (Flux.conv_dims)(x149, x147)
      x166 = (Flux._match_eltype)(x149, x147)
      x167 = +
      x168 = (getproperty)(x149, :weight)
      x169 = (NNlib.conv)(x166, x168, x165)
      x170 = (finalize)(x147)
      x171 = (getproperty)(x149, :bias)
      x172 = (getproperty)(x149, :stride)
      x173 = reshape
      x174 = (tuple)(x171)
      x175 = (Umlaut.__new__)(Flux.var"#227#228")
      x176 = (map)(x175, x172)
      x177 = (tuple)(Colon(), 1)
      x178 = (Umlaut.check_variable_length)(x174, 1, 162)
      x179 = (Umlaut.check_variable_length)(x176, 2, 164)
      x180 = (getindex)(x176, 1)
      x181 = (getindex)(x176, 2)
      x182 = (Umlaut.check_variable_length)(x177, 2, 165)
      x183 = x173(x171, x180, x181, Colon(), 1)
      x184 = (Base.Broadcast.broadcasted)(x167, x169, x183)
      x185 = (Base.Broadcast.broadcasted)(x163, x184)
      x186 = (Base.Broadcast.materialize)(x185)
      x187 = (finalize)(x169)
      x188 = (getindex)(x8, 7)
      x189 = (ndims)(x186)
      x190 = (-)(x189, 1)
      x191 = (getproperty)(x188, :weight)
      x192 = (getproperty)(x188, :weight)
      x193 = (ndims)(x192)
      x194 = (-)(x193, 1)
      x195 = (size)(x191, x194)
      x196 = (getproperty)(x188, :groups)
      x197 = (*)(x195, x196)
      x198 = (Pair)(x190, x197)
      x199 = (Flux._size_check)(x188, x186, x198)
      x200 = (finalize)(x197)
      x201 = NNlib.fast_act
      x202 = (getproperty)(x188, :σ)
      x203 = nothing
      x204 = (Flux.conv_dims)(x188, x186)
      x205 = (Flux._match_eltype)(x188, x186)
      x206 = +
      x207 = (getproperty)(x188, :weight)
      x208 = (NNlib.conv)(x205, x207, x204)
      x209 = (finalize)(x186)
      x210 = (getproperty)(x188, :bias)
      x211 = (getproperty)(x188, :stride)
      x212 = reshape
      x213 = (tuple)(x210)
      x214 = (Umlaut.__new__)(Flux.var"#227#228")
      x215 = (map)(x214, x211)
      x216 = (tuple)(Colon(), 1)
      x217 = (Umlaut.check_variable_length)(x213, 1, 198)
      x218 = (Umlaut.check_variable_length)(x215, 2, 200)
      x219 = (getindex)(x215, 1)
      x220 = (getindex)(x215, 2)
      x221 = (Umlaut.check_variable_length)(x216, 2, 201)
      x222 = x212(x210, x219, x220, Colon(), 1)
      x223 = (Base.Broadcast.broadcasted)(x206, x208, x222)
      x224 = (Base.Broadcast.broadcasted)(x202, x223)
      x225 = (Base.Broadcast.materialize)(x224)
      x226 = (finalize)(x208)
      x227 = (getindex)(x8, 8)
      x228 = (:padding, :stride)
      x229 = (Core.apply_type)(NamedTuple, x228)
      x230 = (getproperty)(x227, :pad)
      x231 = (getproperty)(x227, :stride)
      x232 = (tuple)(x230, x231)
      x233 = x229(x232)
      x234 = PoolDims
      x235 = (getproperty)(x227, :k)
      x236 = (Core.kwcall)(x233, x234, x225, x235)
      x237 = (NNlib.maxpool)(x225, x236)
      x238 = (finalize)(x225)
      x239 = (getindex)(x6, 2)
      x240 = (getproperty)(x239, :layers)
      x241 = (getindex)(x240, 1)
      x242 = (size)(x237)
      x243 = (lastindex)(x242)
      x244 = (-)(x243, 2)
      x245 = (Colon())(1, x244)
      x246 = (getindex)(x242, x245)
      x247 = (getproperty)(x241, :out)
      x248 = (tuple)()
      x249 = nothing
      x250 = (Base.Broadcast.broadcastable)(x246)
      x251 = (Base.Broadcast.broadcastable)(x247)
      x252 = (map)(Base.Broadcast.broadcastable, x248)
      x253 = Base.Broadcast.broadcasted
      x254 = Base.Broadcast.combine_styles
      x255 = (tuple)(x250, x251)
      x256 = (Umlaut.check_variable_length)(x255, 2, 238)
      x257 = (Umlaut.check_variable_length)(x252, 0, 235)
      x258 = x254(x250, x251)
      x259 = (tuple)(x258, div, x250, x251)
      x260 = (Umlaut.check_variable_length)(x259, 4, 242)
      x261 = (Umlaut.check_variable_length)(x252, 0, 235)
      x262 = x253(x258, div, x250, x251)
      x263 = (Base.Broadcast.materialize)(x262)
      x264 = -
      x265 = *
      x266 = (Base.Broadcast.broadcasted)(-, x247, 1)
      x267 = (Base.Broadcast.broadcasted)(x265, x266, x263)
      x268 = (Base.Broadcast.broadcasted)(x264, x246, x267)
      x269 = (Base.Broadcast.materialize)(x268)
      x270 = 0
      x271 = (:padding, :stride)
      x272 = (Core.apply_type)(NamedTuple, x271)
      x273 = (tuple)(x270, x263)
      x274 = x272(x273)
      x275 = (Core.kwcall)(x274, PoolDims, x237, x269)
      x276 = (NNlib.meanpool)(x237, x275)
      x277 = (finalize)(x269)
      x278 = (finalize)(x263)
      x279 = (finalize)(x237)
      x280 = (getindex)(x240, 2)
      x281 = Colon()
      x282 = 4
      x283 = (size)(x276, x282)
      x284 = (reshape)(x276, x281, x283)
      x285 = (getindex)(x240, 3)
      x286 = (getproperty)(x285, :p)
      x287 = (getproperty)(x285, :active)
      x288 = (isnothing)(x287)
      x289 = NNlib.within_gradient
      x290 = x289(x284)
      x291 = (*)(x286, x290)
      x292 = (:dims,)
      x293 = (Core.apply_type)(NamedTuple, x292)
      x294 = (getproperty)(x285, :dims)
      x295 = (tuple)(x294)
      x296 = x293(x295)
      x297 = NNlib.dropout
      x298 = (getproperty)(x285, :rng)
      x299 = (Core.kwcall)(x296, x297, x298, x284, x291)
      x300 = (getindex)(x240, 4)
      x301 = (getproperty)(x300, :weight)
      x302 = (size)(x301, 2)
      x303 = (Pair)(1, x302)
      x304 = (Flux._size_check)(x300, x299, x303)
      x305 = NNlib.fast_act
      x306 = (getproperty)(x300, :σ)
      x307 = nothing
      x308 = (Flux._match_eltype)(x300, x299)
      x309 = +
      x310 = (getproperty)(x300, :weight)
      x311 = (*)(x310, x308)
      x312 = (finalize)(x291)
      x313 = (finalize)(x276)
      x314 = (getproperty)(x300, :bias)
      x315 = (Base.Broadcast.broadcasted)(x309, x311, x314)
      x316 = (Base.Broadcast.broadcasted)(x306, x315)
      x317 = (Base.Broadcast.materialize)(x316)
      x318 = (finalize)(x311)
      x319 = (getindex)(x240, 5)
      x320 = (getproperty)(x319, :p)
      x321 = (getproperty)(x319, :active)
      x322 = (isnothing)(x321)
      x323 = NNlib.within_gradient
      x324 = x323(x317)
      x325 = (*)(x320, x324)
      x326 = (:dims,)
      x327 = (Core.apply_type)(NamedTuple, x326)
      x328 = (getproperty)(x319, :dims)
      x329 = (tuple)(x328)
      x330 = x327(x329)
      x331 = NNlib.dropout
      x332 = (getproperty)(x319, :rng)
      x333 = (Core.kwcall)(x330, x331, x332, x317, x325)
      x334 = (getindex)(x240, 6)
      x335 = (getproperty)(x334, :weight)
      x336 = (size)(x335, 2)
      x337 = (Pair)(1, x336)
      x338 = (Flux._size_check)(x334, x333, x337)
      x339 = NNlib.fast_act
      x340 = (getproperty)(x334, :σ)
      x341 = nothing
      x342 = (Flux._match_eltype)(x334, x333)
      x343 = +
      x344 = (getproperty)(x334, :weight)
      x345 = (*)(x344, x342)
      x346 = (finalize)(x325)
      x347 = (finalize)(x317)
      x348 = (getproperty)(x334, :bias)
      x349 = (Base.Broadcast.broadcasted)(x343, x345, x348)
      x350 = (Base.Broadcast.broadcasted)(x340, x349)
      x351 = (Base.Broadcast.materialize)(x350)
      x352 = (finalize)(x345)
      x353 = (getindex)(x240, 7)
      x354 = (getproperty)(x353, :weight)
      x355 = (size)(x354, 2)
      x356 = (Pair)(1, x355)
      x357 = (Flux._size_check)(x353, x351, x356)
      x358 = NNlib.fast_act
      x359 = (getproperty)(x353, :σ)
      x360 = nothing
      x361 = (Flux._match_eltype)(x353, x351)
      x362 = +
      x363 = (getproperty)(x353, :weight)
      x364 = (*)(x363, x361)
      x365 = (finalize)(x351)
      x366 = (getproperty)(x353, :bias)
      x367 = (Base.Broadcast.broadcasted)(x362, x364, x366)
      x368 = (Base.Broadcast.broadcasted)(x359, x367)
      x369 = (Base.Broadcast.materialize)(x368)
      x370 = (finalize)(x364)
      x371 = nothing
      x372 = (Flux.Losses._check_sizes)(x369, x4)
      x373 = abs2
      x374 = (Base.Broadcast.broadcasted)(-, x369, x4)
      x375 = (tuple)()
      x376 = nothing
      x377 = (Base.Broadcast.broadcastable)(x374)
      x378 = (map)(Base.Broadcast.broadcastable, x375)
      x379 = Base.Broadcast.broadcasted
      x380 = Base.Broadcast.combine_styles
      x381 = (tuple)(x377)
      x382 = (Umlaut.check_variable_length)(x381, 1, 353)
      x383 = (Umlaut.check_variable_length)(x378, 0, 350)
      x384 = x380(x377)
      x385 = (tuple)(x384, x373, x377)
      x386 = (Umlaut.check_variable_length)(x385, 3, 357)
      x387 = (Umlaut.check_variable_length)(x378, 0, 350)
      x388 = x379(x384, x373, x377)
      x389 = (Base.Broadcast.materialize)(x388)
      x390 = (finalize)(x369)
      x391 = (Statistics.mean)(x389)
      return x391
  end)